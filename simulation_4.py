# -*- coding: utf-8 -*-

from __future__ import division
import csv
import sys
import re
from datetime import datetime
import numpy


class StockClass():
    def __init__(self):

        # 메시지
        self.msg = ""
        self.screenNo = "6002"
        self.realtimeList = []

        # 예수금
        self.opw00001Data = 0

        # 보유종목 정보
        self.opw00018Data = {'accountEvaluation': [], 'stocks': []}

        # 주문채결 정보
        self.opw00007Data = {'orderList': []}

        # 주문유형 (1: 신규매수, 2: 신규매도, 3: 매수취소, 4: 매도취소, 5: 매수정정, 6: 매도정정)
        self.order_type = 1

        # 호가 거래구분(00: 지정가, 03: 시장가, 05: 조건부지정가, 06: 최유리지정가, 그외에는 api 문서참조)
        self.hoga_type = "00"

        # 최저가 저장을 위한
        self.lowest_price = {}

        # 최고가 저장을 위한
        self.highest_price = {}

        # 매수 시점 후 당일 최고가 저장을 위한
        self.after_price = {}

        # 처음 매수 가격
        self.first_buy_price = {}

        # 매수 시점
        self.after_buy_flag = False

        # 자동매매 Flag (코드별)
        self.code_auto_flag = {}

        # 자동매매 Flag 가 Enable 될 시점의 Data
        self.change_time_data = {}

        # 자동매매 Flag
        self.auto_trade_flag = True

        # 체결강도 차이를 위해
        self.before_stock_data = {}

        # 매수호가가 한단계 올라갔을 때 시점의 체결 count 체크를 위한
        self.trans_cnt = {}

        # 매수세 체크를 위해 Flag 가 시작된 시간 저장을 위한
        self.check_trans_time = {}

        # 체결 count 가 만족할 때 매수/매도 세를 저장하기 위한
        # trans_data[stock_code][0] = 매수체결량
        # trans_data[stock_code][0] = 매도체결량
        self.trans_data = {}

        # Sell order list
        self.sell_order_list = {}

        # 최우선 매수 평균을 위한
        self.top_buy_price = {}

        # 체결 강도 표준편차를 위한
        self.stdev_strong = {}

        # kospi list
        self.kospi_code_list = ['000020', '000030', '000040', '000050', '000060', '000070', '000075',
                                '000080', '000087', '000100', '000105', '000120', '000140', '000145',
                                '000150', '000155', '000157', '000180', '000210', '000215', '000220', '000225',
                                '000227', '000230', '000240', '000270', '000300', '000320', '000325', '000370',
                                '000390', '000400', '000430', '000480', '000490', '000500', '000520', '000540',
                                '000545', '000547', '000590', '000640', '000650', '000660', '000670', '000680',
                                '000700', '000720', '000725', '000760', '000810', '000815', '000850', '000860',
                                '000880', '000885', '00088K', '000890', '000910', '000950', '000970', '000990',
                                '000995', '001020', '001040', '001045', '001060', '001065', '001067', '001070',
                                '001080', '001120', '001130', '001140', '001200', '001210', '001230', '001250',
                                '001260', '001270', '001275', '001290', '001340', '001360', '001380', '001390',
                                '001420', '001430', '001440', '001450', '001460', '001465', '001470', '001500',
                                '001510', '001515', '001520', '001525', '001527', '001529', '001530', '001550',
                                '001560', '001570', '001620', '001630', '001680', '001685', '001720', '001725',
                                '001740', '001745', '001750', '001755', '001770', '001780', '001790', '001795',
                                '001799', '001800', '001820', '001880', '001940', '002000', '002005', '002020',
                                '002025', '002030', '002070', '002100', '002140', '002150', '002170', '002200',
                                '002210', '002220', '002240', '002250', '002270', '002300', '002310', '002320',
                                '002350', '002355', '002360', '002380', '002390', '002410', '002420', '002450',
                                '002460', '002600', '002620', '002630', '002690', '002700', '002710', '002720',
                                '002760', '002780', '002785', '002787', '002790', '002795', '002810', '002820',
                                '002840', '002870', '002880', '002900', '002920', '002960', '002990', '002995',
                                '003000', '003010', '003030', '003060', '003070', '003075', '003080', '003090',
                                '003120', '003160', '003200', '003220', '003230', '003240', '003280', '003300',
                                '003350', '003410', '003415', '003460', '003465', '003470', '003475', '003480',
                                '003490', '003495', '003520', '003530', '003535', '003540', '003545', '003547',
                                '003550', '003555', '003560', '003570', '003580', '003610', '003620', '003650',
                                '003680', '003690', '003720', '003780', '003830', '003850', '003920', '003925',
                                '003960', '004000', '004020', '004060', '004080', '004090', '004100', '004105',
                                '004130', '004135', '004140', '004150', '004170', '004200', '004250', '004255',
                                '004270', '004310', '004360', '004365', '004370', '004380', '004410', '004415',
                                '004430', '004440', '004450', '004490', '004540', '004545', '004560', '004565',
                                '004690', '004700', '004710', '004720', '004770', '004800', '004830', '004835',
                                '004840', '004870', '004890', '004910', '004920', '004960', '004970', '004980',
                                '004985', '004987', '004989', '004990', '00499K', '005010', '005030', '005070',
                                '005090', '005110', '005180', '005190', '005250', '005257', '005300', '005305',
                                '005320', '005360', '005380', '005385', '005387', '005389', '005390', '005420',
                                '005430', '005440', '005450', '005490', '005500', '005610', '005680', '005690',
                                '005720', '005725', '005740', '005745', '005750', '005800', '005810', '005820',
                                '005830', '005850', '005870', '005880', '005930', '005935', '005940', '005945',
                                '005950', '005960', '005965', '005980', '006040', '006060', '006090', '006110',
                                '006120', '006125', '006200', '006220', '006260', '006280', '006340', '006345',
                                '006360', '006370', '006380', '006390', '006400', '006405', '006490', '006570',
                                '006650', '006660', '006740', '006800', '006805', '00680K', '006840', '006880',
                                '006890', '006980', '007070', '007110', '007120', '007160', '007210', '007280',
                                '007310', '007340', '007460', '007540', '007570', '007575', '007590', '007610',
                                '007630', '007660', '007690', '007700', '007810', '007815', '00781K', '007860',
                                '007980', '008040', '008060', '008110', '008250', '008260', '008350', '008355',
                                '008420', '008490', '008500', '008560', '008600', '008700', '008730', '008770',
                                '008775', '008870', '008930', '008970', '009070', '009140', '009150', '009155',
                                '009160', '009180', '009190', '009200', '009240', '009270', '009275', '009290',
                                '009310', '009320', '009410', '009415', '009420', '009440', '009450', '009460',
                                '009470', '009540', '009580', '009680', '009770', '009810', '009830', '009835',
                                '009970', '010040', '010050', '010060', '010100', '010120', '010130', '010140',
                                '010145', '010420', '010580', '010600', '010620', '010640', '010660', '010690',
                                '010770', '010780', '010820', '010950', '010955', '010960', '011000', '011070',
                                '011090', '011150', '011155', '011160', '011170', '011200', '011210', '011230',
                                '011280', '011300', '011330', '011390', '011420', '011500', '011690', '011700',
                                '011760', '011780', '011785', '011790', '011810', '011930', '012030', '012160',
                                '012170', '012200', '012205', '012280', '012320', '012330', '012450', '012510',
                                '012600', '012610', '012630', '012690', '012750', '012800', '013000', '013360',
                                '013520', '013570', '013580', '013700', '013870', '014130', '014160', '014280',
                                '014285', '014440', '014530', '014580', '014680', '014710', '014790', '014820',
                                '014825', '014830', '014910', '014915', '014990', '015020', '015230', '015260',
                                '015350', '015360', '015540', '015590', '015760', '015860', '015890', '016090',
                                '016360', '016380', '016385', '016450', '016580', '016590', '016610', '016710',
                                '016740', '016800', '016880', '017040', '017180', '017370', '017390', '017550',
                                '017670', '017800', '017810', '017900', '017940', '017960', '018250', '018260',
                                '018470', '018500', '018670', '018880', '019170', '019175', '019180', '019440',
                                '019490', '019680', '019685', '020000', '020120', '020150', '020560', '020760',
                                '021050', '021240', '021820', '023000', '023150', '023350', '023450', '023530',
                                '023590', '023800', '023810', '023960', '024070', '024090', '024110', '024720',
                                '024890', '024900', '025000', '025530', '025540', '025560', '025620', '025750',
                                '025820', '025860', '025890', '026890', '026940', '026960', '027390', '027410',
                                '027740', '027970', '028050', '028100', '028260', '02826K', '028670', '029460',
                                '029530', '029780', '030000', '030200', '030210', '030610', '030720', '030790',
                                '031430', '031440', '031820', '032350', '032560', '032640', '032830', '033180',
                                '033240', '033250', '033270', '033530', '033660', '033780', '033920', '034020',
                                '034120', '034220', '034300', '034310', '034590', '034730', '03473K', '034830',
                                '035000', '035150', '035250', '035420', '035510', '035720', '036460', '036530',
                                '036570', '036580', '037270', '037560', '037710', '039130', '039490', '039570',
                                '041650', '042660', '042670', '042700', '044380', '044450', '044820', '047040',
                                '047050', '047400', '047810', '049770', '049800', '051600', '051630', '051900',
                                '051905', '051910', '051915', '052690', '053210', '053690', '055490', '055550',
                                '057050', '058430', '058650', '058730', '058850', '058860', '060980', '063160',
                                '064350', '064960', '066570', '066575', '067830', '068270', '068290', '068400',
                                '069260', '069460', '069500', '069620', '069640', '069660', '069730', '069960',
                                '070960', '071050', '071055', '071090', '071320', '071840', '071950', '071970',
                                '072130', '072710', '073240', '074610', '075180', '075580', '077500', '077970',
                                '078000', '078520', '078930', '078935', '079160', '079430', '079440', '079550',
                                '079660', '079980', '081000', '081660', '082640', '082740', '083370', '083380',
                                '083420', '084010', '084670', '084680', '084690', '084695', '084870', '085310',
                                '085620', '086280', '086790', '088350', '088790', '088980', '089470', '089590',
                                '090080', '090350', '090355', '090370', '090430', '090435', '091090', '091160',
                                '091170', '091180', '091210', '091220', '091230', '092200', '092220', '092230',
                                '092440', '092780', '093050', '093230', '093240', '093370', '094280', '094800',
                                '095570', '095720', '096300', '096760', '096770', '096775', '097230', '097750',
                                '097950', '097955', '098560', '099140', '099340', '099350', '100220', '100250',
                                '100840', '100910', '101060', '101140', '101280', '101530', '102110', '102260',
                                '102280', '102460', '102780', '102960', '102970', '103130', '103140', '103590',
                                '104520', '104530', '104700', '105010', '105190', '105560', '105630', '105780',
                                '105840', '107590', '108450', '108590', '108670', '108675', '109070', '111110',
                                '111770', '112610', '114090', '114100', '114260', '114460', '114470', '114800',
                                '114820', '115390', '117460', '117580', '117680', '117690', '117700', '118000',
                                '119650', '120030', '120110', '120115', '122090', '122260', '122630', '122900',
                                '123310', '123320', '123690', '123700', '123890', '126560', '128820', '128940',
                                '129260', '130660', '130680', '130730', '131890', '132030', '133690', '133820',
                                '134380', '134790', '136340', '136490', '137610', '137930', '138040', '138230',
                                '138250', '138490', '138520', '138530', '138540', '138910', '138920', '138930',
                                '139130', '139220', '139230', '139240', '139250', '139260', '139270', '139280',
                                '139290', '139310', '139320', '139480', '139660', '140570', '140580', '140700',
                                '140710', '140890', '140910', '140950', '141240', '143210', '143460', '143850',
                                '143860', '144600', '144620', '145210', '145270', '145670', '145720', '145850',
                                '145990', '145995', '147970', '148020', '148070', '150460', '152100', '152180',
                                '152280', '152330', '152380', '152500', '152550', '152870', '153130', '153270',
                                '153360', '155660', '155900', '156080', '157450', '157490', '157500', '157510',
                                '157520', '159650', '159800', '160580', '161000', '161390', '161510', '161890',
                                '163560', '166400', '167860', '168300', '168490', '168580', '169950', '170350',
                                '170900', '172580', '174350', '174360', '175330', '176710', '176950', '180640',
                                '18064K', '181480', '181710', '182480', '182490', '183190', '183700', '183710',
                                '185680', '185750', '189400', '190150', '190160', '190620', '192090', '192400',
                                '192530', '192720', '192820', '194370', '195870', '195920', '195930', '195970',
                                '195980', '196030', '196220', '196230', '200020', '200030', '200040', '200050',
                                '200250', '200880', '203780', '204210', '204320', '204420', '204450', '204480',
                                '205720', '207940', '208470', '210540', '210780', '210980', '211210', '211260',
                                '211560', '211900', '213500', '213610', '213630', '214320', '214330', '214390',
                                '214420', '214980', '215620', '217770', '217780', '217790', '218420', '219390',
                                '219480', '219900', '220130', '222170', '222180', '222190', '222200', '223190',
                                '225030', '225040', '225050', '225060', '225130', '225800', '226320', '226380',
                                '226490', '226810', '226980', '227540', '227550', '227560', '227570', '227830',
                                '227840', '228790', '228800', '228810', '228820', '229200', '229640', '229720',
                                '230480', '232080', '232590', '233160', '233740', '234080', '234310', '236350',
                                '236460', '237350', '237370', '237440', '238670', '238720', '239660', '241180',
                                '241390', '241560', '241590', '243880', '243890', '244580', '244620', '244660',
                                '244670', '244820', '245340', '245350', '245360', '245710', '247780', '247790',
                                '247800', '248170', '248260', '248270', '249420', '250730', '250780', '251270',
                                '251340', '251350', '251590', '251600', '251890', '252000', '252400', '252410',
                                '252420', '252650', '252670', '252710', '252720', '252730', '253150', '253160',
                                '253230', '253240', '253250', '253280', '253290', '253990', '256440', '256450',
                                '256750', '260200', '260270', '261060', '261070', '261110', '261120', '261140',
                                '261220', '261240', '261250', '261260', '261270', '261920', '263190', '264900',
                                '26490K', '265690', '266140', '266160', '266360', '266370', '266390', '266410',
                                '266420', '266550', '267250', '267260', '267270', '267290', '267300', '267440',
                                '267450', '267490', '267500', '267770', '268280', '269370', '269420', '269530',
                                '269540', '270800', '270810', '271050', '271060', '271560', '271980', '272220',
                                '272230', '272450', '272550', '272560', '272570', '272580', '272910', '273130',
                                '273140', '275280', '275290', '275300', '275540', '275750', '275980', '276000',
                                '276650', '276970', '276990', '277540', '277630', '277640', '277650', '278240',
                                '278420', '278530', '278540', '278620', '279530', '279540', '280320', '280360',
                                '280920', '280930', '280940', '281820', '281990', '282000', '282330', '282690',
                                '283580', '283930', '284430', '284740', '284980', '284990', '285000', '285010',
                                '285020', '285130', '28513K', '285690', '287180', '287300', '287310', '287320',
                                '287330', '289040', '289250', '289260', '289480', '289670', '290080', '290130',
                                '291130', '291610', '291620', '291630', '291660', '291680', '291890', '292050',
                                '292100', '292110', '292120', '292130', '292140', '292150', '292160', '292190',
                                '292340', '292500', '292560', '292570', '292580', '292590', '292730', '292750',
                                '292770', '293180', '294400', '294870', '295000', '295020', '295040', '295820',
                                '295840', '295860', '295880', '295890', '296710', '298340', '298770', '299070',
                                '299080', '500007', '500033', '500001', '500002', '500035', '500036', '500020',
                                '500028', '500003', '500004', '500005', '500006', '500008', '500009', '500010',
                                '500011', '500012', '500013', '500014', '500015', '500016', '500017', '500018',
                                '500019', '500021', '500022', '500023', '500024', '500027', '500029', '500030',
                                '500031', '500032', '500037', '500038', '500034', '500025', '500026', '510001',
                                '510002', '510003', '510004', '510005', '510006', '510007', '510010', '510008',
                                '510009', '520004', '520005', '520006', '520007', '520013', '520014', '520015',
                                '520022', '520023', '520009', '520010', '520011', '520020', '520021', '520025',
                                '520024', '520012', '520003', '530003', '530004', '530005', '530006', '530007',
                                '530008', '530009', '530010', '530011', '530012', '530013', '530034', '530035',
                                '530039', '530040', '530041', '530042', '530043', '530044', '530045', '530046',
                                '530047', '530048', '530049', '530050', '530051', '530015', '530016', '530017',
                                '530018', '530019', '530020', '530021', '530022', '530032', '530033', '530031',
                                '530036', '530037', '530038', '530055', '530056', '530052', '530002', '530014',
                                '530023', '550001', '550002', '550003', '550004', '550005', '550006', '550007',
                                '550008', '550009', '550010', '550011', '550012', '550013', '550014', '550015',
                                '550016', '550019', '550020', '550021', '550022', '550023', '550024', '550025',
                                '550026', '550027', '550029', '550030', '550031', '550032', '550033', '550048',
                                '550049', '550050', '550046', '550047', '550041', '550044', '550045', '550042',
                                '550043', '550051', '550018', '570003', '570008', '570009', '570015', '570019',
                                '570020', '570021', '570024', '570022', '570023', '570013', '570014', '570025',
                                '570026', '570027', '570010', '570011', '570012', '570028', '570007', '570006',
                                '580003', '580004', '580005', '580006', '580007', '590007', '590008', '590009',
                                '590010', '590011', '590013', '590016', '590017', '590003', '590004', '590002',
                                '590005', '590006', '590018', '590012', '900140', '']

        # kosdaq list
        self.kosdaq_code_list = ['900090', '900080', '900110', '900270', '900260', '900290', '900300',
                                 '900310', '000250', '000440', '001000', '001540', '001810', '001840', '002230',
                                 '002290', '002680', '002800', '003100', '003310', '003380', '003670', '003800',
                                 '004590', '004650', '004780', '005160', '005290', '005670', '005710', '005860',
                                 '005990', '006050', '006140', '006580', '006620', '006730', '006910', '006920',
                                 '007330', '007370', '007390', '007530', '007680', '007720', '007770', '007820',
                                 '008290', '008370', '008470', '008800', '008830', '009300', '009520', '009620',
                                 '009730', '009780', '010170', '010240', '010280', '010470', '011040', '011080',
                                 '011320', '011370', '011560', '012340', '012620', '012700', '012790', '012860',
                                 '013030', '013120', '013310', '013720', '013810', '013990', '014100', '014190',
                                 '014200', '014470', '014570', '014620', '014940', '014970', '015710', '015750',
                                 '016100', '016170', '016250', '016600', '016670', '016790', '016920', '017000',
                                 '017250', '017480', '017510', '017650', '017680', '017890', '018000', '018120',
                                 '018290', '018310', '018620', '018680', '018700', '019010', '019210', '019540',
                                 '019550', '019570', '019590', '019660', '019770', '019990', '020180', '020400',
                                 '020710', '021040', '021045', '021080', '021320', '021650', '021880', '022100',
                                 '022220', '023160', '023410', '023440', '023460', '023600', '023760', '023770',
                                 '023790', '023890', '023900', '023910', '024060', '024120', '024660', '024740',
                                 '024800', '024810', '024830', '024840', '024850', '024880', '024910', '024940',
                                 '024950', '025320', '025440', '025550', '025770', '025870', '025880', '025900',
                                 '025950', '025980', '026040', '026150', '026180', '026260', '026910', '027040',
                                 '027050', '027580', '027710', '027830', '028040', '028080', '028150', '028300',
                                 '029480', '029960', '030190', '030270', '030350', '030520', '030530', '030960',
                                 '031310', '031330', '031390', '031510', '031860', '031980', '032040', '032080',
                                 '032190', '032280', '032500', '032540', '032580', '032620', '032680', '032685',
                                 '032750', '032790', '032800', '032820', '032850', '032860', '032940', '032960',
                                 '032980', '033050', '033100', '033110', '033130', '033160', '033170', '033200',
                                 '033230', '033290', '033310', '033320', '033340', '033430', '033500', '033540',
                                 '033560', '033600', '033640', '033790', '033830', '034230', '034810', '034940',
                                 '034950', '035080', '035200', '035290', '035460', '035480', '035600', '035610',
                                 '035620', '035760', '035810', '035890', '035900', '036000', '036010', '036030',
                                 '036090', '036120', '036170', '036180', '036190', '036200', '036260', '036420',
                                 '036480', '036490', '036540', '036560', '036620', '036630', '036640', '036670',
                                 '036690', '036710', '036800', '036810', '036830', '036890', '036930', '037030',
                                 '037070', '037230', '037330', '037350', '037370', '037400', '037440', '037460',
                                 '037760', '037950', '038010', '038060', '038070', '038110', '038160', '038290',
                                 '038340', '038390', '038460', '038500', '038530', '038540', '038620', '038680',
                                 '038870', '038880', '038950', '039010', '039020', '039030', '039200', '039230',
                                 '039240', '039290', '039310', '039340', '039420', '039440', '039560', '039610',
                                 '039670', '039740', '039830', '039840', '039860', '039980', '040160', '040300',
                                 '040350', '040420', '040610', '040910', '041020', '041140', '041190', '041440',
                                 '041460', '041510', '041520', '041590', '041830', '041910', '041920', '041930',
                                 '041960', '042000', '042040', '042110', '042370', '042420', '042500', '042510',
                                 '042520', '042600', '042940', '043090', '043100', '043150', '043200', '043220',
                                 '043260', '043290', '043340', '043360', '043370', '043580', '043590', '043610',
                                 '043650', '043710', '043910', '044060', '044180', '044340', '044480', '044490',
                                 '044780', '044960', '045060', '045100', '045300', '045340', '045390', '045510',
                                 '045520', '045660', '045890', '045970', '046070', '046110', '046120', '046140',
                                 '046210', '046310', '046390', '046440', '046890', '046940', '046970', '047080',
                                 '047310', '047440', '047560', '047770', '047820', '047920', '048260', '048410',
                                 '048430', '048470', '048530', '048550', '048770', '048830', '048870', '048910',
                                 '049070', '049080', '049120', '049180', '049430', '049470', '049480', '049520',
                                 '049550', '049630', '049720', '049830', '049950', '049960', '050090', '050110',
                                 '050120', '050320', '050540', '050760', '050860', '050890', '050960', '051160',
                                 '051360', '051370', '051380', '051390', '051490', '051500', '051780', '051980',
                                 '052020', '052190', '052220', '052260', '052290', '052300', '052330', '052400',
                                 '052420', '052460', '052600', '052670', '052710', '052770', '052790', '052860',
                                 '052900', '053030', '053050', '053060', '053110', '053160', '053260', '053270',
                                 '053280', '053290', '053300', '053350', '053450', '053590', '053610', '053620',
                                 '053660', '053700', '053800', '053950', '053980', '054040', '054050', '054090',
                                 '054180', '054210', '054220', '054300', '054340', '054410', '054450', '054540',
                                 '054620', '054630', '054670', '054780', '054800', '054920', '054930', '054940',
                                 '054950', '056000', '056080', '056090', '056190', '056360', '056700', '056730',
                                 '057030', '057500', '057540', '057680', '057880', '058110', '058220', '058400',
                                 '058420', '058450', '058470', '058530', '058610', '058630', '058820', '059090',
                                 '059100', '059120', '059210', '060150', '060230', '060240', '060250', '060260',
                                 '060280', '060300', '060310', '060370', '060380', '060480', '060540', '060560',
                                 '060570', '060590', '060720', '060900', '061040', '061250', '061970', '062860',
                                 '063080', '063170', '063440', '063570', '063760', '064090', '064240', '064260',
                                 '064290', '064480', '064510', '064520', '064550', '064760', '064800', '064820',
                                 '065060', '065130', '065150', '065160', '065170', '065350', '065420', '065440',
                                 '065450', '065500', '065510', '065530', '065560', '065570', '065620', '065650',
                                 '065660', '065680', '065690', '065710', '065770', '065940', '065950', '066110',
                                 '066130', '066310', '066360', '066410', '066430', '066590', '066620', '066670',
                                 '066700', '066790', '066900', '066910', '066970', '066980', '067000', '067010',
                                 '067080', '067160', '067170', '067280', '067290', '067310', '067390', '067570',
                                 '067630', '067730', '067770', '067900', '067920', '067990', '068050', '068240',
                                 '068330', '068760', '068790', '068930', '068940', '069080', '069110', '069140',
                                 '069330', '069410', '069510', '069540', '069920', '070300', '070590', '071200',
                                 '071280', '071460', '071670', '071850', '072020', '072470', '072520', '072770',
                                 '072870', '072950', '072990', '073010', '073070', '073110', '073190', '073490',
                                 '073540', '073560', '073570', '073640', '074430', '074600', '075130', '075970',
                                 '076080', '076610', '077280', '077360', '078020', '078070', '078130', '078140',
                                 '078150', '078160', '078340', '078350', '078590', '078600', '078650', '078860',
                                 '078890', '078940', '079000', '079170', '079190', '079370', '079650', '079810',
                                 '079940', '079950', '079960', '079970', '080000', '080010', '080160', '080220',
                                 '080420', '080440', '080470', '080520', '080530', '080580', '081150', '081580',
                                 '081970', '082210', '082270', '082660', '082800', '082850', '082920', '083310',
                                 '083450', '083470', '083500', '083550', '083640', '083650', '083660', '083790',
                                 '083930', '084110', '084180', '084370', '084650', '084730', '084990', '085370',
                                 '08537M', '085660', '085670', '085810', '085910', '086040', '086060', '086250',
                                 '086390', '086450', '086520', '086670', '086890', '086900', '086960', '086980',
                                 '087010', '087260', '087600', '087730', '088130', '088290', '088390', '088800',
                                 '088910', '089010', '089030', '089140', '089150', '089230', '089530', '089600',
                                 '089790', '089850', '089890', '089980', '090150', '090360', '090410', '090460',
                                 '090470', '090710', '090730', '090740', '090850', '091120', '091340', '091440',
                                 '091580', '091590', '091700', '091970', '091990', '092040', '092070', '092130',
                                 '092300', '092460', '092600', '092730', '092870', '093190', '093320', '093380',
                                 '093520', '093640', '093920', '094170', '094190', '094360', '094480', '094820',
                                 '094840', '094850', '094860', '094940', '094970', '095190', '095270', '095340',
                                 '095500', '095610', '095660', '095700', '095910', '096040', '096240', '096350',
                                 '096530', '096610', '096630', '096640', '096690', '096870', '097520', '097780',
                                 '097800', '097870', '098120', '098460', '098660', '099190', '099220', '099320',
                                 '099410', '099440', '099520', '099660', '100030', '100090', '100120', '100130',
                                 '100660', '100700', '101000', '101160', '101170', '101240', '101330', '101390',
                                 '101400', '101490', '101670', '101680', '101730', '101930', '102120', '102210',
                                 '102710', '102940', '103230', '104040', '104200', '104460', '104480', '104540',
                                 '104830', '105330', '105550', '105740', '106080', '106190', '106240', '106520',
                                 '108230', '108320', '108380', '108790', '108860', '109080', '109610', '109740',
                                 '109820', '109860', '109960', '111820', '111870', '112040', '112240', '113810',
                                 '114120', '114190', '114450', '114570', '114630', '114810', '115160', '115180',
                                 '115310', '115440', '115450', '115480', '115500', '115530', '115570', '115610',
                                 '115960', '117670', '118990', '119500', '119610', '119830', '119850', '119860',
                                 '120240', '121440', '121600', '121800', '121850', '121890', '122310', '122350',
                                 '122450', '122640', '122690', '122800', '122870', '122990', '123010', '123040',
                                 '123100', '123260', '123330', '123410', '123420', '123570', '123750', '123840',
                                 '123860', '124500', '126600', '126640', '126700', '126870', '126880', '127120',
                                 '127160', '127710', '128660', '130500', '130580', '130740', '130960', '131030',
                                 '131090', '131100', '131180', '131220', '131290', '131370', '131390', '131400',
                                 '131760', '131970', '133750', '134060', '134580', '134780', '136480', '136510',
                                 '136540', '137400', '137940', '137950', '138070', '138080', '138360', '138580',
                                 '138610', '138690', '139050', '139670', '140070', '140410', '140520', '140670',
                                 '140860', '141000', '141020', '141070', '141080', '142210', '142280', '142760',
                                 '143160', '143240', '143540', '144510', '144960', '145020', '147760', '147830',
                                 '148140', '148250', '149940', '149950', '149980', '150840', '150900', '151860',
                                 '151910', '153460', '153490', '154030', '154040', '155650', '155960', '156100',
                                 '158310', '159580', '159910', '160550', '160600', '160980', '161570', '161580',
                                 '166090', '166480', '168330', '170030', '170790', '170920', '171010', '171090',
                                 '171120', '173940', '174880', '174900', '175140', '176440', '177350', '177830',
                                 '178320', '178780', '178920', '179900', '180400', '181340', '182360', '182400',
                                 '182690', '183300', '183490', '184230', '185490', '187220', '187270', '187420',
                                 '187790', '187870', '189300', '189690', '189860', '189980', '190510', '191410',
                                 '191420', '192080', '192250', '192390', '192410', '192440', '193250', '194480',
                                 '194510', '194610', '195440', '195990', '196170', '196300', '196450', '196490',
                                 '196700', '197210', '198440', '200130', '200230', '200470', '200670', '200710',
                                 '200780', '201490', '203450', '203650', '203690', '204620', '204630', '204840',
                                 '204990', '205100', '205470', '205500', '206400', '206560', '206640', '206650',
                                 '207760', '208140', '208350', '208370', '208640', '208710', '208860', '211270',
                                 '212560', '213090', '213420', '214150', '214180', '214270', '214310', '214370',
                                 '214430', '214450', '214680', '214870', '215000', '215090', '215100', '215200',
                                 '215360', '215380', '215480', '215600', '215790', '216050', '217190', '217270',
                                 '217480', '217500', '217600', '217620', '217730', '217820', '218150', '218410',
                                 '219130', '219420', '219550', '220100', '220180', '220260', '220630', '221610',
                                 '221840', '221980', '222040', '222080', '222110', '222420', '222800', '222810',
                                 '222980', '223310', '224060', '224110', '225190', '225330', '225430', '225530',
                                 '225570', '225590', '225650', '226340', '226350', '226360', '226400', '226440',
                                 '227610', '227950', '228340', '228850', '230240', '230360', '230490', '230980',
                                 '232140', '232270', '232330', '234100', '234300', '234920', '235010', '236200',
                                 '237690', '237750', '237880', '238090', '238120', '238490', '239340', '239610',
                                 '240540', '240810', '241520', '241690', '241710', '241770', '241790', '241820',
                                 '242040', '243070', '243840', '246690', '246720', '250000', '250060', '250930',
                                 '251370', '251630', '252500', '253450', '253590', '254120', '255220', '255440',
                                 '256630', '256840', '256940', '257730', '258610', '258790', '258830', '259630',
                                 '260660', '260930', '261200', '262830', '263540', '263600', '263700', '263720',
                                 '263750', '263770', '263800', '263810', '263860', '263920', '264290', '264450',
                                 '264660', '264850', '265480', '265520', '265560', '265920', '267320', '267790',
                                 '267980', '269620', '270520', '271740', '272290', '273060', '276920', '277070',
                                 '277410', '277480', '279410', '281410', '281740', '284620', '287410', '291210',
                                 '950110', '950170', '950130', '950140', '950160', '900280', '900040', '900120',
                                 '900250', '900070', '900100', '']

        file_name = str(datetime.now().strftime('%Y%m%d')) + ".txt"
        self.f = open(file_name, "w")

        self.csv_row_cnt = 0
        self.before_csv_row_cnt = 0

        self.before_date = ""

        self.trans_sum = {}

        self.profit_price = 0
        self.total_profit_price = 0
        self.all_total_profit_price = 0
        self.get_cnt = 0
        self.total_get_cnt = 0
        self.lost_cnt = 0
        self.total_lost_cnt = 0

        self.total_buy = 0
        self.total_sell = 0

        self.all_total_sell = 0
        self.all_total_buy = 0

        self.buy_amount = 0
        self.sell_amount = 0

        self.file_step = 0
        self.file_threshold_make = 0

        self.external_set = False

        self.average_price = []


    def getDiffTime(self, stock_code, make_time):
        # 시간 차이 계산
        before_hour = int(self.check_trans_time[stock_code][:2])
        before_min = int(self.check_trans_time[stock_code][2:4])
        before_sec = int(self.check_trans_time[stock_code][4:])

        current_hour = int(make_time[:2])
        current_min = int(make_time[2:4])
        current_sec = int(make_time[4:])

        diff_time = ((current_hour * 3600) + (current_min * 60) + current_sec) - \
                    ((before_hour * 3600) + (before_min * 60) + before_sec)
        return diff_time


    def checkCondition(self, data_list):
        self.csv_row_cnt += 1
        if (len(data_list) == 0 or len(data_list) < 24):
            print("empty")
            return

        if (data_list[0] == "index"):
            print("first row")
            return

        stock_code = data_list[23]

        split_data = re.split(" ", data_list[0])
        if (self.before_date != split_data[0]):
            per_after = 0
            if (self.after_price.get(stock_code) and self.first_buy_price.get(stock_code)):
                per_after = ((self.after_price.get(stock_code) / self.first_buy_price.get(stock_code)) - 1) * 100
            else:
                per_after = 0

            per_total = 0
            if (self.lowest_price.get(stock_code) and self.highest_price.get(stock_code)):
                per_total = ((self.highest_price.get(stock_code) / self.lowest_price.get(stock_code)) - 1) * 100
            else:
                per_total = 0

            self.f.write("[%s][LOWEST][%s]:[HIGHEST][%s]:[TOTAL_PER][%s]:[AFTER][%s]:[PERCENT][%s]\n" %
                         (self.before_date, str(self.lowest_price.get(stock_code)),
                          str(self.highest_price.get(stock_code)), str(per_total),
                          str(self.after_price.get(stock_code)), str(per_after)))

            retention_cnt = 0
            retention_price = 0
            current_price = 0

            if (self.opw00018Data.get('stocks')):
                retention_cnt = int(self.opw00018Data['stocks'][0][2])
                retention_price = int(self.opw00018Data['stocks'][0][3])
                current_price = abs(int(data_list[2]))

            ev_per = 0
            if (current_price != 0):
                ev_per = (1 - (retention_price / current_price)) * 100

            ev_price = current_price - retention_price
            # if(retention_price > current_price):
            #    ev_price = retention_price - current_price
            # else:
            #    ev_price = current_price - retention_price

            self.f.write(
                "[%s]::::::::[RETENTION_CNT][%s]:[RETENTION_PRICE][%s]:[CUR][%d][EV-PRICE][%d]:[EV-PER][%f]\n\n" %
                ( self.before_date,  str(retention_cnt), str(retention_price), current_price,
                 ev_price, ev_per))
            self.f.write("[DAY_TOTAL]==============> CODE[%s][GET][%d][LOST][%d][PRICE][%d]:::::[BUY][%d],[SELL][%d]\n" %
                         (stock_code, self.get_cnt, self.lost_cnt, self.profit_price, self.buy_amount, self.sell_amount))
            self.f.write("ACC_TOTAL======================> CODE[%s][GET][%d][LOST][%d][PRICE][%d]:::::[TOTAL_BUY][%d],[TOTAL_SELL][%d]\n\n" %
                         (stock_code, self.total_get_cnt, self.total_lost_cnt, self.total_profit_price, self.total_buy, self.total_sell))

            self.get_cnt = 0
            self.lost_cnt = 0
            self.profit_price = 0
            self.buy_amount = 0
            self.sell_amount = 0

            if (data_list[0] == "END"):
                self.opw00018Data['stocks'] = []
                self.total_buy = 0
                self.total_sell = 0
                self.total_get_cnt = 0
                self.total_lost_cnt = 0
                self.total_profit_price = 0
                self.csv_row_cnt = 0
                self.average_price.clear()

            self.before_date = split_data[0]
            self.lowest_price.clear()
            self.highest_price.clear()
            self.after_buy_flag = False
            self.first_buy_price.clear()
            self.after_price.clear()
            self.trans_sum.clear()

            print("=============================================")
            print("Clear lowest price")
            print("=============================================")

        # 체결시간 9시 전이면 return
        if ((abs(int(data_list[1])) < 90000) or (abs(int(data_list[1])) > 153000)):
            print("[before am 9] or [after pm 3:30]")
            return

        buy_cnt = "1"

        # 1% 수익 목표
        profit_rate = 1.01

        loss_rate = 0.97

        # 체결강도 차이가 0.1 이상일 때 주문
        # diff_strong = 0.1

        # 매수 호가가 최저보다 한단계 위 일때 그 전 체결 주문이 100개 이상
        threshold_cnt = 100

        # 위의 threshold_cnt 를 만족하고 그 구간 체결강도(매수/매도) 가 몇 이상일 때
        # threshold_amount = 2
        threshold_amount = 1

        threshold_time = 60
        step_price_level = 3


        # 체결강도(매수/매도)(매수세:bull_power) 의 비율이 아래 이상일 때
        threshold_make_amount = 5

        if(self.external_set):
            step_price_level = self.file_step
            threshold_make_amount =  self.file_threshold_make

        self.file_threshold_make = threshold_make_amount

        # Step Price 가 변경된 후 기다리는 시간 (초)
        threshold_make_time = 30

        # Buy
        stock_code = data_list[23]
        current_price = abs(int(data_list[2]))
        low_price = abs(int(data_list[12]))
        high_price = abs(int(data_list[11]))
        first_sell_price = abs(int(data_list[5]))
        first_buy_price = abs(int(data_list[6]))
        strong = abs(float(data_list[19]))
        trans_amount = int(data_list[7])
        trans_time = data_list[1]

        diff_rate = float(data_list[4])

        make_time = data_list[1]

        diff_sell_buy = first_sell_price - first_buy_price

        # 처음 들어온 Data 는 before_stock_data 가 없으므로..
        # 이 if 는 각 Stock Code 마다 한번 씩만
        if (not self.before_stock_data.get(stock_code)):
            self.before_stock_data[stock_code] = data_list

        # 체결강도
        before_strong = abs(float(self.before_stock_data[stock_code][19]))

        # 최우선매도호가 - 최우선매수호가
        before_diff_sell_buy = abs(int(self.before_stock_data[stock_code][5])) - abs(int(self.before_stock_data[stock_code][6]))

        # 호가단위 금액 저장을 위한
        step_price = 0

        if (current_price < 1000):
            step_price = 1
        elif (current_price < 5000):
            step_price = 5
        elif (current_price < 10000):
            step_price = 10
        elif (current_price < 50000):
            step_price = 50
        elif (current_price < 100000):
            step_price = 100
        elif (current_price < 500000):
            if (stock_code in self.kospi_code_list):
                step_price = 500
            else:
                step_price = 100
        elif (current_price < 1000000):
            if (stock_code in self.kospi_code_list):
                step_price = 1000
            else:
                step_price = 100


        # 각 요일별 최고가 저장을 위해
        self.highest_price[stock_code] = high_price

        if (not self.after_price.get(stock_code)):
            self.after_price[stock_code] = 0

        if (self.after_buy_flag and
                self.after_price[stock_code] < current_price):
            self.after_price[stock_code] = current_price

        self.average_price.append(current_price)

        #checking_step = diff_sell_buy - before_diff_sell_buy
        #before_rate = float(self.before_stock_data[stock_code][4])

        if(diff_sell_buy >= (step_price * step_price_level)):
            self.code_auto_flag[stock_code] = True
            self.change_time_data[stock_code] = data_list
            self.before_csv_row_cnt = self.csv_row_cnt
            self.check_trans_time[stock_code] = make_time
            self.trans_data[stock_code] = [0, 0]


        if( self.code_auto_flag.get(stock_code) ):

            change_time_diff_sell_buy = abs(int(self.change_time_data[stock_code][5])) - abs(int(self.change_time_data[stock_code][6]))
            change_time_trans_amount = int(self.change_time_data[stock_code][7])

            before_rate = float(self.change_time_data[stock_code][4])

            # 체결량 저장
            if (self.trans_sum.get(stock_code)):
                self.trans_sum[stock_code].append(trans_amount)
            else:
                self.trans_sum[stock_code] = [trans_amount]

            if (trans_amount > 0):
                self.trans_data[stock_code][0] += trans_amount
            else:
                self.trans_data[stock_code][1] += abs(trans_amount)

            # 시간 차이 계산
            diff_time = self.getDiffTime(stock_code, make_time)

            # 모니터링 시간이 threshold_make_time 을 넘겼을 때 Rule Check
            if (diff_time > threshold_make_time):

                # 매수세를 확인하기 위한
                if (self.trans_data[stock_code][1] == 0):
                    bull_power = 0
                else:
                    bull_power = (self.trans_data[stock_code][0] / self.trans_data[stock_code][1])


                if((bull_power >= threshold_make_amount)):

                    print("Buy!!!!!!")

                    temp_cnt = int(100000 / current_price)

                    if(temp_cnt > 0):
                        buy_cnt = str(temp_cnt)
                    else:
                        buy_cnt = "1"

                    buy_order_price = 0
                    if ((first_sell_price - first_buy_price) > step_price):
                        buy_order_price = first_buy_price + step_price
                    else:
                        buy_order_price = first_sell_price

                    # self.testAutoBuy(stock_code, 1, str(buy_order_price), buy_cnt)

                    print("BUY order: " + stock_code + ", row: " + str(self.csv_row_cnt) +
                          ", price: " + str(buy_order_price))

                    self.after_buy_flag = True
                    if (not self.first_buy_price.get(stock_code)):
                        self.first_buy_price[stock_code] = buy_order_price

                    self.f.write("============================================================\n")
                    self.f.write("[%s][BUY ]:FLAG_LINE[%d]:LINE[%d]:\tCODE[%s]:\tORDER_PRICE[%d]:\t:BEFORE_SELL_BUY[%d]\t:DIFF_SELL_BUY[%d]:\tDIFF_RATE[%f]\n" %
                                 (split_data[0], self.before_csv_row_cnt, self.csv_row_cnt, stock_code, buy_order_price, change_time_diff_sell_buy, diff_sell_buy,
                                  (diff_rate - before_rate)))
                    self.f.write("============================================================\n")
                    self.buy_amount += (buy_order_price * int(buy_cnt))
                    self.total_buy += (buy_order_price * int(buy_cnt))
                    self.all_total_buy += (buy_order_price * int(buy_cnt))

                    if (self.opw00018Data['stocks']):
                        retention_cnt = int(self.opw00018Data['stocks'][0][2])
                        retention_price = int(self.opw00018Data['stocks'][0][3])
                        total_cnt = retention_cnt + int(buy_cnt)
                        avg_price = int(
                            ((retention_price * retention_cnt) + (buy_order_price * int(buy_cnt))) / total_cnt)
                        list_data = ["A" + stock_code, "SIMULATION", str(total_cnt), str(avg_price)]
                        self.opw00018Data = {'accountEvaluation': [], 'stocks': []}
                        self.opw00018Data['stocks'].append(list_data)
                        # self.opw00018Data['stocks'] = [stock_code, "SIMULATION", str(total_cnt), str(avg_price)]

                    else:  # empty
                        list_data = ["A" + stock_code, "SIMULATION", buy_cnt, str(buy_order_price)]
                        # self.opw00018Data['stocks'] = list_data
                        self.opw00018Data['stocks'].append(list_data)

                    # else:
                    #    self.f.write("[" + split_data[0] + "][NOT-BUY ]:LINE[" + str(self.csv_row_cnt) +
                    #                 "]:\tCODE[" + stock_code + "]:\tORDER_PRICE[" +  "]:\t" +
                    #                "diff_step[" + str(checking) + "\n" +
                    #                 "============================================================\n")


                    # 초기화
                    self.code_auto_flag[stock_code] = False
                    self.trans_cnt[stock_code] = 0
                    self.trans_data[stock_code] = [0, 0]
                    self.stdev_strong.clear()
                    self.top_buy_price.clear()
                    self.change_time_data[stock_code] = []
                    self.trans_sum.clear()

        self.before_stock_data[stock_code] = data_list
        # print(self.lowest_price)

        # Sell
        if (self.auto_trade_flag):

            for stock_list in self.opw00018Data['stocks']:
                # 잔고 조회 후에 stock 이 존재하면

                if (stock_list[0] == ("A" + stock_code)):
                    # 매입가 대비 1% 가 오른 현재 가격이면 매도 주문

                    if (((int(stock_list[3]) * profit_rate) <= current_price) or
                            ((int(stock_list[3]) * loss_rate) >= current_price)):

                        sell_order_price = 0

                        if ((int(stock_list[3]) * loss_rate) >= current_price):
                            self.f.write(
                                "!! LOST !! ============================================================\n")
                            self.lost_cnt += 1
                            self.total_lost_cnt += 1
                        else:
                            self.f.write("< GET > ============================================================\n")
                            self.get_cnt += 1
                            self.total_get_cnt += 1

                        if ((first_sell_price - first_buy_price) > step_price):
                            sell_order_price = first_buy_price + step_price
                        else:
                            sell_order_price = first_buy_price

                        # 기존에 매도 주문 내역이 없으면 바로 매도 주문
                        if (not self.sell_order_list.get(str("A" + stock_code))):
                            # self.testAutoBuy(stock_code, 2, str(first_sell_price), stock_list[2])
                            self.sell_order_list[str("A" + stock_code)] = int(stock_list[2])
                            print("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
                            print("Sell!!! current_price: " + str(current_price))
                            print("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")

                            print("Sell order: " + stock_code + ", row: " + str(self.csv_row_cnt) +
                                  ", Price: " + str(sell_order_price) +
                                  ", amount: " + stock_list[2])
                            # print("[Sell] :" + stock_code + "\n")
                            # print("[Sell]!!!!!" + stock_code + ", " + str(sell_order_price) + "," + stock_list[2])
                            # print( self.sell_order_list)
                            print(str(self.sell_order_list))
                            self.f.write("============================================================\n" +
                                         "[" + split_data[0] + "][SELL]:LINE[" + str(self.csv_row_cnt) +
                                         "]:\tCODE[" + stock_code + "]:" +
                                         "\tPRICE[" + str(sell_order_price) + "]:" +
                                         "\tAMOUNT[" + stock_list[2] + "]:" +
                                         "\tPROFIT[" + str(
                                (sell_order_price - int(stock_list[3])) * int(stock_list[2])) + "]:" +
                                         "\n" + "============================================================\n")

                            self.profit_price += ((sell_order_price - int(stock_list[3])) * int(stock_list[2]))
                            self.total_profit_price += ((sell_order_price - int(stock_list[3])) * int(stock_list[2]))
                            self.all_total_profit_price += ((sell_order_price - int(stock_list[3])) * int(stock_list[2]))
                            self.sell_amount += (sell_order_price * int(stock_list[2]))
                            self.total_sell += (sell_order_price * int(stock_list[2]))
                            self.all_total_sell += (sell_order_price * int(stock_list[2]))

                            # 무조건 체결된다고 보고...
                            self.sell_order_list[str("A" + stock_code)] -= int(stock_list[2])
                            self.opw00018Data = {'accountEvaluation': [], 'stocks': []}
                            print(str(self.sell_order_list))

                        # 기존에 매도 주문 내역이 있고, 매도 주문을 낼 수 있는 잔량이 있으면 매도 주문
                        elif ((int(stock_list[2]) - self.sell_order_list[str("A" + stock_code)]) > 0):
                            # self.testAutoBuy(stock_code, 2, str(first_sell_price), stock_list[2])
                            self.sell_order_list[str("A" + stock_code)] = self.sell_order_list[
                                                                              str("A" + stock_code)] + int(
                                stock_list[2])
                            print("Sell order: " + stock_code + ", 가격: " + str(sell_order_price) +
                                  ", 수량: " + stock_list[2])

                            # print("[Sell]!!!!!" + stock_code + ", " + str(sell_order_price) + "," + stock_list[2])
                            print(str(self.sell_order_list) + "\n")
                            self.f.write("!!!!!!!!!!!!!!!!!!!!!!!!!! SELL ORDER !!!!!!!!!!!!!!!!!!!!\n")

                        # 매도 할 수 있는 잔고가 없을 때
                        else:
                            print("매도 할 수 있는 잔고가 없습니다.")
                            print("매도 잔고 없음: " + stock_code)


"""

        if (checking_step <= -(step_price * step_price_level) and
            diff_rate > before_rate):

            print("Buy!!!!!!")

            buy_order_price = 0
            if ((first_sell_price - first_buy_price) > step_price):
                buy_order_price = first_buy_price + step_price
            else:
                buy_order_price = first_sell_price

            # self.testAutoBuy(stock_code, 1, str(buy_order_price), buy_cnt)

            print("BUY order: " + stock_code + ", row: " + str(self.csv_row_cnt) +
                  ", price: " + str(buy_order_price) )

            self.after_buy_flag = True
            if (not self.first_buy_price.get(stock_code)):
                self.first_buy_price[stock_code] = buy_order_price

            self.f.write("============================================================\n")
            self.f.write("[%s][BUY ]:LINE[%d]:\tCODE[%s]:\tORDER_PRICE[%d]:\tDIFF_STEP[%d]:\tDIFF_RATE[%f]\n" %
                         (split_data[0], self.csv_row_cnt, stock_code, buy_order_price, checking_step, (diff_rate-before_rate)))
            self.f.write("============================================================\n")

            if (self.opw00018Data['stocks']):
                retention_cnt = int(self.opw00018Data['stocks'][0][2])
                retention_price = int(self.opw00018Data['stocks'][0][3])
                total_cnt = retention_cnt + int(buy_cnt)
                avg_price = int(
                    ((retention_price * retention_cnt) + (buy_order_price * int(buy_cnt))) / total_cnt)
                list_data = ["A" + stock_code, "SIMULATION", str(total_cnt), str(avg_price)]
                self.opw00018Data = {'accountEvaluation': [], 'stocks': []}
                self.opw00018Data['stocks'].append(list_data)
                # self.opw00018Data['stocks'] = [stock_code, "SIMULATION", str(total_cnt), str(avg_price)]

            else:  # empty
                list_data = ["A" + stock_code, "SIMULATION", buy_cnt, str(buy_order_price)]
                # self.opw00018Data['stocks'] = list_data
                self.opw00018Data['stocks'].append(list_data)

        #else:
        #    self.f.write("[" + split_data[0] + "][NOT-BUY ]:LINE[" + str(self.csv_row_cnt) +
        #                 "]:\tCODE[" + stock_code + "]:\tORDER_PRICE[" +  "]:\t" +
        #                "diff_step[" + str(checking) + "\n" +
        #                 "============================================================\n")

        # 초기화
        self.code_auto_flag[stock_code] = False
        self.trans_cnt[stock_code] = 0
        self.trans_data[stock_code] = [0, 0]
        self.stdev_strong.clear()
        self.top_buy_price.clear()



        self.before_stock_data[stock_code] = data_list
        # print(self.lowest_price)

        # Sell
        if (self.auto_trade_flag):

            for stock_list in self.opw00018Data['stocks']:
                # 잔고 조회 후에 stock 이 존재하면

                if (stock_list[0] == ("A" + stock_code)):
                    # 매입가 대비 1% 가 오른 현재 가격이면 매도 주문

                    if ( ((int(stock_list[3]) * profit_rate) <= current_price) or
                            ((int(stock_list[3]) * loss_rate) >= current_price) ):

                        sell_order_price = 0

                        if( (int(stock_list[3]) * loss_rate) >= current_price):
                            self.f.write("!! LOST !! ============================================================\n")
                        else:
                            self.f.write("< GET > ============================================================\n")

                        if ((first_sell_price - first_buy_price) > step_price):
                            sell_order_price = first_buy_price + step_price
                        else:
                            sell_order_price = first_buy_price

                        # 기존에 매도 주문 내역이 없으면 바로 매도 주문
                        if (not self.sell_order_list.get(str("A" + stock_code))):
                            # self.testAutoBuy(stock_code, 2, str(first_sell_price), stock_list[2])
                            self.sell_order_list[str("A" + stock_code)] = int(stock_list[2])
                            print("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
                            print("Sell!!! current_price: " + str(current_price))
                            print("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")

                            print("Sell order: " + stock_code + ", row: " + str(self.csv_row_cnt) +
                                  ", Price: " + str(sell_order_price) +
                                  ", amount: " + stock_list[2])
                            # print("[Sell] :" + stock_code + "\n")
                            # print("[Sell]!!!!!" + stock_code + ", " + str(sell_order_price) + "," + stock_list[2])
                            # print( self.sell_order_list)
                            print(str(self.sell_order_list))
                            self.f.write("============================================================\n" +
                                         "[" + split_data[0] + "][SELL]:LINE[" + str(self.csv_row_cnt) +
                                         "]:\tCODE[" + stock_code + "]:" +
                                         "\tPRICE[" + str(sell_order_price) + "]:" +
                                         "\tAMOUNT[" + stock_list[2] + "]:" +
                                         "\tPROFIT[" + str( (sell_order_price - int(stock_list[3])) * int(stock_list[2]) ) + "]:" +
                                         "\n" + "============================================================\n")

                            # 무조건 체결된다고 보고...
                            self.sell_order_list[str("A" + stock_code)] -= int(stock_list[2])
                            self.opw00018Data = {'accountEvaluation': [], 'stocks': []}
                            print(str(self.sell_order_list))

                        # 기존에 매도 주문 내역이 있고, 매도 주문을 낼 수 있는 잔량이 있으면 매도 주문
                        elif ((int(stock_list[2]) - self.sell_order_list[str("A" + stock_code)]) > 0):
                            # self.testAutoBuy(stock_code, 2, str(first_sell_price), stock_list[2])
                            self.sell_order_list[str("A" + stock_code)] = self.sell_order_list[
                                                                              str("A" + stock_code)] + int(
                                stock_list[2])
                            print("Sell order: " + stock_code + ", 가격: " + str(sell_order_price) +
                                  ", 수량: " + stock_list[2])

                            # print("[Sell]!!!!!" + stock_code + ", " + str(sell_order_price) + "," + stock_list[2])
                            print(str(self.sell_order_list) + "\n")

                        # 매도 할 수 있는 잔고가 없을 때
                        else:
                            print("매도 할 수 있는 잔고가 없습니다.")
                            print("매도 잔고 없음: " + stock_code)

                # count  #stock_list[2]
                # 매입가 #stock_list[3]
"""

if __name__ == "__main__":

    try:
        c_main = StockClass()

    except Exception as e:
        print(e)

    print("Number of arguments: ", len(sys.argv), "arguments")
    print("Arguments List: ", str(sys.argv))

    """
   000270 000660 000810 003550 003670
    005380 005490 005690 005930 006400
    007390 010950 011170 012330 014200
    015760 016170 017670 018260 028260
    028300 032830 033780 034220 034230
    034730 035420 035720 035760 036490
    036830 041960 042000 044180 046110
    046890 049950 051900 051910 055550
    056190 066570 066970 068270 068760
    078340 084990 086790 086900 090430
    091990 095700 096770 098460 105560
    112040 130960 145020 151910 178920
    207940 214270 215600 240810 251270
    253450 263750 950160
    """

    code_list = ["005930", "000660", "068270", "005490", "005380",
                 "207940", "051910", "105560", "028260", "035420",
                 "055550", "015760", "012330", "051900", "032830",
                 "034730", "096770", "017670", "090430", "018260",
                 "006400", "066570", "086790", "033780", "003550",
                 "000270", "011170", "251270", "010950", "000810",

                 "091990", "215600", "086900", "084990", "151910",
                 "028300", "130960", "253450", "068760", "003670",
                 "263750", "078340", "950160", "016170", "145020",

                 "095700", "034230", "036490", "041960", "178920",
                 "042000", "007390", "240810", "035760", "056190",
                 "066970", "098460", "036830", "049950", "046890"]

    code_list = ["005930", "000660", "068270", "005490", "005380",
                 "207940", "051910", "105560", "028260", "035420",
                 "055550", "015760", "012330", "051900", "032830",
                 "034730", "096770", "017670", "090430", "018260",
                 "006400", "066570", "086790", "033780", "003550",
                 "000270", "011170", "251270", "010950", "000810",
                 "009150", "000030", "002790", "024110", "035720",
                 "036570", "009540", "004020", "010130", "030200",
                 "000720", "139480", "034220", "021240", "004990",
                 "271560", "267250", "032640", "036460", "069500" ]
    """
                 "091990", "215600", "086900", "084990", "151910",
                 "028300", "130960", "253450", "068760", "003670",
                 "263750", "078340", "950160", "016170", "145020",
                 "095700", "034230", "036490", "041960", "178920",
                 "042000", "007390", "240810", "035760", "056190",
                 "066970", "098460", "036830", "049950", "046890",
                 "028150", "073070", "022100", "003380", "192080",
                 "041510", "058470", "065660", "115450", "038540",
                 "108230", "039030", "035900", "085660", "214370",
                 "102940", "069080", "025980", "112040", "200130"
                 ]
    """
    #code_list = ["207940"]
    #code_list = ["000660", "005930"]
    #code_list = ["000660"]
    #code_list = ["005930"]
    #code_list = ["005380"]
    #code_list = ["068270"]

    filename = "C:/Users/User/Desktop/시세/Data/000810.csv"

    if (len(sys.argv) == 2):
        filename = sys.argv[1]

    summary_file_name = str(datetime.now().strftime('%Y%m%d')) + "_Summary.txt"
    summary_f = open(summary_file_name, "a")


    c_main.external_set = True
    c_main.file_step = 4
    c_main.file_threshold_make = 6


    for i in range(2,7):

        for j in range(1,11):
            c_main.file_step = i
            c_main.file_threshold_make = j

            summary_f.write("Step[%d], Bull[%d]\n\n" % (c_main.file_step, c_main.file_threshold_make))
            for code in code_list:

                filename = "C:/Users/User/Desktop/시세/Data/" + code + ".csv"
                # filename = code + ".csv"
                f = open(filename, "r", encoding='UTF8')
                #f = open(filename, "r")
                rdr = csv.reader(f)

                # code = filename[30:36]

                for line in rdr:
                    #        print(line)
                    line.append(code)
                    c_main.checkCondition(line)

                average_price = numpy.array(c_main.average_price)
                price_avg = numpy.mean(average_price)

                per = 0
                if (c_main.total_buy > 0):
                    per = (c_main.total_profit_price / c_main.total_buy * 100)
                else:
                    per = 0

                summary_f.write("CODE[%s]::AVG[%7d]::::ACC_TOTAL[%5s]=====> [GET][%3d][LOST][%3d][PROFIT][%10d]RATE[%.2f]:::::[TOTAL_BUY][%10d],[TOTAL_SELL][%10d]\n" %
                            (code, int(price_avg), "GET" if c_main.total_profit_price > 0 else "LOST", c_main.total_get_cnt, c_main.total_lost_cnt,
                             c_main.total_profit_price, per, c_main.total_buy, c_main.total_sell))

                # Today 정보를 파일에 쓰기 위해
                line[0] = "END"
                c_main.checkCondition(line)

                f.close()

            per = 0
            if(c_main.all_total_buy > 0):
                per = (c_main.all_total_profit_price/c_main.all_total_buy * 100)
            else:
                per = 0

            c_main.f.write("ALL_TOTAL_PROFIT[%d], ALL_BUY[%d], ALL_SELL[%d], RATE[%f]\n" %
                           (c_main.all_total_profit_price, c_main.all_total_buy, c_main.all_total_sell, per ))
            summary_f.write("=========================================================================================================\n")
            summary_f.write("========== ALL_TOTAL_PROFIT[%d], ALL_BUY[%d], ALL_SELL[%d], RATE[%f]==========\n" %
                           (c_main.all_total_profit_price, c_main.all_total_buy, c_main.all_total_sell, per ))
            summary_f.write("=========================================================================================================\n\n\n\n")

            c_main.all_total_profit_price = 0
            c_main.all_total_buy = 0
            c_main.all_total_sell = 0